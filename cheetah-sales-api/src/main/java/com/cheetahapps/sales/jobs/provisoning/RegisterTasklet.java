package com.cheetahapps.sales.jobs.provisoning;

import org.springframework.batch.core.StepContribution;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.core.step.tasklet.Tasklet;
import org.springframework.batch.item.ExecutionContext;
import org.springframework.batch.repeat.RepeatStatus;
import org.springframework.stereotype.Component;

import com.cheetahapps.sales.problem.DuplicateDataProblem;
import com.cheetahapps.sales.role.Role;
import com.cheetahapps.sales.role.RoleBusinessDelegate;
import com.cheetahapps.sales.tenant.Tenant;
import com.cheetahapps.sales.tenant.TenantBusinessDelegate;
import com.cheetahapps.sales.user.User;
import com.cheetahapps.sales.user.UserBusinessDelegate;
import com.cheetahapps.sales.user.UserDto;

import io.vavr.control.Option;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Component
@RequiredArgsConstructor
public class RegisterTasklet implements Tasklet {

	private final TenantBusinessDelegate tenantBusinessDelegate;
	private final RoleBusinessDelegate roleBusinessDelegate;
	private final UserBusinessDelegate userBusinessDelegate;

	@Override
	public RepeatStatus execute(StepContribution contribution, ChunkContext chunkContext) throws Exception {
		log.info("Starting registration process");
		String email = contribution.getStepExecution().getJobParameters().getString("email");
		String company = contribution.getStepExecution().getJobParameters().getString("company");
		String password = contribution.getStepExecution().getJobParameters().getString("password");
		String firstName = contribution.getStepExecution().getJobParameters().getString("firstName");
		String lastName = contribution.getStepExecution().getJobParameters().getString("lastName");

		// check tenant first
		Option<User> usr = userBusinessDelegate.findByEmail(email);

		if (!usr.isEmpty()) {
			throw new DuplicateDataProblem(
					"User already exists. Password can be regenerated by clicking 'forgot password' link.");
		}

		Option<Tenant> tenant = tenantBusinessDelegate.findByName(company);

		UserDto userDto = UserDto.builder().company(company)
				.email(email).firstName(firstName).lastName(lastName)
				.password(password).build();
		
		Tenant t = null;
		User u = null;

		if (tenant.isEmpty()) { // new tenant signup

			// create new tenant
			
			log.info("Creating new tenant");

			t = tenantBusinessDelegate.create(company);

			Role role = roleBusinessDelegate.getTenantAdmin();
			
			userDto.setRole(role);
			userDto.setTenantId(t.getId());
			userDto.setTenantCode(t.getCode());
			userDto.setTenantName(t.getName());

			u = userBusinessDelegate.create(userDto);

		} else {
			// existing tenant user can only join as team member and mail goes out to tenant
			// admin to approve
			
			log.info("Existing tenant");
			
			t = tenant.get();

			Role role = roleBusinessDelegate.getTeamMember();
			
			userDto.setRole(role);
			userDto.setTenantId(t.getId());
			userDto.setTenantCode(t.getCode());
			userDto.setTenantName(t.getName());

			u = userBusinessDelegate.create(userDto);
		}
		
		//escalate to job context
		ExecutionContext stepContext = contribution.getStepExecution().getExecutionContext();
		
		stepContext.put("existingTenant", !tenant.isEmpty());
		stepContext.put("tenant", t);
		stepContext.put("user", u);

		return RepeatStatus.FINISHED;
	}

}
